"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const injectables_1 = require("../../assets/injectables");
const debug_loggers_1 = require("../../utils/debug-loggers");
const cdp_1 = require("../utils/cdp");
const constants_1 = require("./constants");
const http_status_codes_1 = require("http-status-codes");
const load_assets_1 = __importDefault(require("../../load-assets"));
const string_1 = require("../utils/string");
const internalRequest = {
    condition: (event) => !event.networkId,
    handler: async (event, client) => {
        (0, debug_loggers_1.requestPipelineInternalRequestLogger)('%r', event);
        await client.Fetch.failRequest({
            requestId: event.requestId,
            errorReason: 'Aborted',
        });
    },
};
const serviceRequest = {
    condition: (event, options, serviceRoutes) => {
        const url = event.request.url;
        // NOTE: the service 'Error page' should be proxied.
        if (url === serviceRoutes.errorPage1
            || url === serviceRoutes.errorPage2)
            return false;
        return options.serviceDomains.some(domain => url.startsWith(domain));
    },
    handler: async (event, client) => {
        (0, debug_loggers_1.requestPipelineServiceRequestLogger)('%r', event);
        const { requestId } = event;
        if ((0, cdp_1.isRequest)(event))
            await client.Fetch.continueRequest({ requestId });
        else {
            // Hack: CDP doesn't allow to continue response for requests sent from the reloaded page.
            // Such situation rarely occurs on 'heartbeat' or 'open-file-protocol' requests.
            // We are using the simplest way to fix it - just omit such errors.
            try {
                await client.Fetch.continueResponse({ requestId });
            }
            catch (err) {
                if (err.message === constants_1.INVALID_INTERCEPTED_RESPONSE_ERROR_MSG)
                    return;
                throw err;
            }
        }
    },
};
const defaultFaviconRequest = {
    condition: (event) => {
        const parsedUrl = new URL(event.request.url);
        return parsedUrl.pathname === injectables_1.DEFAULT_FAVICON_PATH;
    },
    handler: async (event, client, options) => {
        (0, debug_loggers_1.requestPipelineLogger)('%r', event);
        if ((0, cdp_1.isRequest)(event))
            await client.Fetch.continueRequest({ requestId: event.requestId });
        else {
            if (event.responseStatusCode === http_status_codes_1.StatusCodes.NOT_FOUND) { // eslint-disable-line no-lonely-if
                const { favIcon } = (0, load_assets_1.default)(options.developmentMode);
                await client.Fetch.fulfillRequest({
                    requestId: event.requestId,
                    responseCode: http_status_codes_1.StatusCodes.OK,
                    responseHeaders: [constants_1.FAVICON_CONTENT_TYPE_HEADER],
                    body: (0, string_1.toBase64String)(favIcon),
                });
            }
            else
                await client.Fetch.continueResponse({ requestId: event.requestId });
        }
    },
};
const SPECIAL_REQUEST_HANDLERS = [
    internalRequest,
    serviceRequest,
    defaultFaviconRequest,
];
function getSpecialRequestHandler(event, options, serviceRoutes) {
    const specialRequestHandler = SPECIAL_REQUEST_HANDLERS.find(h => h.condition(event, options, serviceRoutes));
    return specialRequestHandler ? specialRequestHandler.handler : null;
}
exports.default = getSpecialRequestHandler;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3BlY2lhbC1oYW5kbGVycy5qcyIsInNvdXJjZVJvb3QiOiIiLCJzb3VyY2VzIjpbIi4uLy4uLy4uL3NyYy9wcm94eWxlc3MvcmVxdWVzdC1waXBlbGluZS9zcGVjaWFsLWhhbmRsZXJzLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7O0FBRUEsMERBQWdFO0FBR2hFLDZEQUltQztBQUVuQyxzQ0FBeUM7QUFDekMsMkNBQWtHO0FBQ2xHLHlEQUFnRDtBQUNoRCxvRUFBMkM7QUFDM0MsNENBQWlEO0FBR2pELE1BQU0sZUFBZSxHQUFHO0lBQ3BCLFNBQVMsRUFBRSxDQUFDLEtBQXlCLEVBQVcsRUFBRSxDQUFDLENBQUMsS0FBSyxDQUFDLFNBQVM7SUFDbkUsT0FBTyxFQUFJLEtBQUssRUFBRSxLQUF5QixFQUFFLE1BQW1CLEVBQWlCLEVBQUU7UUFDL0UsSUFBQSxvREFBb0MsRUFBQyxJQUFJLEVBQUUsS0FBSyxDQUFDLENBQUM7UUFFbEQsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLFdBQVcsQ0FBQztZQUMzQixTQUFTLEVBQUksS0FBSyxDQUFDLFNBQVM7WUFDNUIsV0FBVyxFQUFFLFNBQVM7U0FDekIsQ0FBQyxDQUFDO0lBQ1AsQ0FBQztDQUNjLENBQUM7QUFFcEIsTUFBTSxjQUFjLEdBQUc7SUFDbkIsU0FBUyxFQUFFLENBQUMsS0FBeUIsRUFBRSxPQUE4QixFQUFFLGFBQW1DLEVBQVcsRUFBRTtRQUNuSCxNQUFNLEdBQUcsR0FBRyxLQUFLLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQztRQUU5QixvREFBb0Q7UUFDcEQsSUFBSSxHQUFHLEtBQUssYUFBYSxDQUFDLFVBQVU7ZUFDN0IsR0FBRyxLQUFLLGFBQWEsQ0FBQyxVQUFVO1lBQ25DLE9BQU8sS0FBSyxDQUFDO1FBRWpCLE9BQU8sT0FBTyxDQUFDLGNBQWMsQ0FBQyxJQUFJLENBQUMsTUFBTSxDQUFDLEVBQUUsQ0FBQyxHQUFHLENBQUMsVUFBVSxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUM7SUFDekUsQ0FBQztJQUNELE9BQU8sRUFBRSxLQUFLLEVBQUUsS0FBeUIsRUFBRSxNQUFtQixFQUFpQixFQUFFO1FBQzdFLElBQUEsbURBQW1DLEVBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRWpELE1BQU0sRUFBRSxTQUFTLEVBQUUsR0FBRyxLQUFLLENBQUM7UUFFNUIsSUFBSSxJQUFBLGVBQVMsRUFBQyxLQUFLLENBQUM7WUFDaEIsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLGVBQWUsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7YUFDakQ7WUFDRCx5RkFBeUY7WUFDekYsZ0ZBQWdGO1lBQ2hGLG1FQUFtRTtZQUNuRSxJQUFJO2dCQUNBLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxnQkFBZ0IsQ0FBQyxFQUFFLFNBQVMsRUFBRSxDQUFDLENBQUM7YUFDdEQ7WUFDRCxPQUFPLEdBQVEsRUFBRTtnQkFDYixJQUFJLEdBQUcsQ0FBQyxPQUFPLEtBQUssa0RBQXNDO29CQUN0RCxPQUFPO2dCQUVYLE1BQU0sR0FBRyxDQUFDO2FBQ2I7U0FFSjtJQUNMLENBQUM7Q0FDYyxDQUFDO0FBRXBCLE1BQU0scUJBQXFCLEdBQUc7SUFDMUIsU0FBUyxFQUFFLENBQUMsS0FBeUIsRUFBVyxFQUFFO1FBQzlDLE1BQU0sU0FBUyxHQUFHLElBQUksR0FBRyxDQUFDLEtBQUssQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUM7UUFFN0MsT0FBTyxTQUFTLENBQUMsUUFBUSxLQUFLLGtDQUFvQixDQUFDO0lBQ3ZELENBQUM7SUFDRCxPQUFPLEVBQUUsS0FBSyxFQUFFLEtBQXlCLEVBQUUsTUFBbUIsRUFBRSxPQUE4QixFQUFpQixFQUFFO1FBQzdHLElBQUEscUNBQXFCLEVBQUMsSUFBSSxFQUFFLEtBQUssQ0FBQyxDQUFDO1FBRW5DLElBQUksSUFBQSxlQUFTLEVBQUMsS0FBSyxDQUFDO1lBQ2hCLE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxlQUFlLENBQUMsRUFBRSxTQUFTLEVBQUUsS0FBSyxDQUFDLFNBQVMsRUFBRSxDQUFDLENBQUM7YUFDbEU7WUFDRCxJQUFJLEtBQUssQ0FBQyxrQkFBa0IsS0FBSywrQkFBVyxDQUFDLFNBQVMsRUFBRSxFQUFFLG1DQUFtQztnQkFDekYsTUFBTSxFQUFFLE9BQU8sRUFBRSxHQUFHLElBQUEscUJBQVUsRUFBQyxPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7Z0JBRXhELE1BQU0sTUFBTSxDQUFDLEtBQUssQ0FBQyxjQUFjLENBQUM7b0JBQzlCLFNBQVMsRUFBUSxLQUFLLENBQUMsU0FBUztvQkFDaEMsWUFBWSxFQUFLLCtCQUFXLENBQUMsRUFBRTtvQkFDL0IsZUFBZSxFQUFFLENBQUUsdUNBQTJCLENBQUU7b0JBQ2hELElBQUksRUFBYSxJQUFBLHVCQUFjLEVBQUMsT0FBTyxDQUFDO2lCQUMzQyxDQUFDLENBQUM7YUFDTjs7Z0JBRUcsTUFBTSxNQUFNLENBQUMsS0FBSyxDQUFDLGdCQUFnQixDQUFDLEVBQUUsU0FBUyxFQUFFLEtBQUssQ0FBQyxTQUFTLEVBQUUsQ0FBQyxDQUFDO1NBQzNFO0lBQ0wsQ0FBQztDQUNjLENBQUM7QUFFcEIsTUFBTSx3QkFBd0IsR0FBRztJQUM3QixlQUFlO0lBQ2YsY0FBYztJQUNkLHFCQUFxQjtDQUN4QixDQUFDO0FBRUYsU0FBd0Isd0JBQXdCLENBQUUsS0FBeUIsRUFBRSxPQUErQixFQUFFLGFBQW9DO0lBQzlJLE1BQU0scUJBQXFCLEdBQUcsd0JBQXdCLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxLQUFLLEVBQUUsT0FBTyxFQUFFLGFBQWEsQ0FBQyxDQUFDLENBQUM7SUFFN0csT0FBTyxxQkFBcUIsQ0FBQyxDQUFDLENBQUMscUJBQXFCLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUM7QUFDeEUsQ0FBQztBQUpELDJDQUlDIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IFByb3RvY29sIGZyb20gJ2RldnRvb2xzLXByb3RvY29sJztcbmltcG9ydCBSZXF1ZXN0UGF1c2VkRXZlbnQgPSBQcm90b2NvbC5GZXRjaC5SZXF1ZXN0UGF1c2VkRXZlbnQ7XG5pbXBvcnQgeyBERUZBVUxUX0ZBVklDT05fUEFUSCB9IGZyb20gJy4uLy4uL2Fzc2V0cy9pbmplY3RhYmxlcyc7XG5pbXBvcnQgeyBSZXF1ZXN0SGFuZGxlciwgU3BlY2lhbFNlcnZpY2VSb3V0ZXMgfSBmcm9tICcuLi90eXBlcyc7XG5pbXBvcnQgeyBQcm90b2NvbEFwaSB9IGZyb20gJ2Nocm9tZS1yZW1vdGUtaW50ZXJmYWNlJztcbmltcG9ydCB7XG4gICAgcmVxdWVzdFBpcGVsaW5lSW50ZXJuYWxSZXF1ZXN0TG9nZ2VyLFxuICAgIHJlcXVlc3RQaXBlbGluZUxvZ2dlcixcbiAgICByZXF1ZXN0UGlwZWxpbmVTZXJ2aWNlUmVxdWVzdExvZ2dlcixcbn0gZnJvbSAnLi4vLi4vdXRpbHMvZGVidWctbG9nZ2Vycyc7XG5pbXBvcnQgeyBQcm94eWxlc3NTZXR1cE9wdGlvbnMgfSBmcm9tICcuLi8uLi9zaGFyZWQvdHlwZXMnO1xuaW1wb3J0IHsgaXNSZXF1ZXN0IH0gZnJvbSAnLi4vdXRpbHMvY2RwJztcbmltcG9ydCB7IEZBVklDT05fQ09OVEVOVF9UWVBFX0hFQURFUiwgSU5WQUxJRF9JTlRFUkNFUFRFRF9SRVNQT05TRV9FUlJPUl9NU0cgfSBmcm9tICcuL2NvbnN0YW50cyc7XG5pbXBvcnQgeyBTdGF0dXNDb2RlcyB9IGZyb20gJ2h0dHAtc3RhdHVzLWNvZGVzJztcbmltcG9ydCBsb2FkQXNzZXRzIGZyb20gJy4uLy4uL2xvYWQtYXNzZXRzJztcbmltcG9ydCB7IHRvQmFzZTY0U3RyaW5nIH0gZnJvbSAnLi4vdXRpbHMvc3RyaW5nJztcblxuXG5jb25zdCBpbnRlcm5hbFJlcXVlc3QgPSB7XG4gICAgY29uZGl0aW9uOiAoZXZlbnQ6IFJlcXVlc3RQYXVzZWRFdmVudCk6IGJvb2xlYW4gPT4gIWV2ZW50Lm5ldHdvcmtJZCxcbiAgICBoYW5kbGVyOiAgIGFzeW5jIChldmVudDogUmVxdWVzdFBhdXNlZEV2ZW50LCBjbGllbnQ6IFByb3RvY29sQXBpKTogUHJvbWlzZTx2b2lkPiA9PiB7XG4gICAgICAgIHJlcXVlc3RQaXBlbGluZUludGVybmFsUmVxdWVzdExvZ2dlcignJXInLCBldmVudCk7XG5cbiAgICAgICAgYXdhaXQgY2xpZW50LkZldGNoLmZhaWxSZXF1ZXN0KHtcbiAgICAgICAgICAgIHJlcXVlc3RJZDogICBldmVudC5yZXF1ZXN0SWQsXG4gICAgICAgICAgICBlcnJvclJlYXNvbjogJ0Fib3J0ZWQnLFxuICAgICAgICB9KTtcbiAgICB9LFxufSBhcyBSZXF1ZXN0SGFuZGxlcjtcblxuY29uc3Qgc2VydmljZVJlcXVlc3QgPSB7XG4gICAgY29uZGl0aW9uOiAoZXZlbnQ6IFJlcXVlc3RQYXVzZWRFdmVudCwgb3B0aW9uczogUHJveHlsZXNzU2V0dXBPcHRpb25zLCBzZXJ2aWNlUm91dGVzOiBTcGVjaWFsU2VydmljZVJvdXRlcyk6IGJvb2xlYW4gPT4ge1xuICAgICAgICBjb25zdCB1cmwgPSBldmVudC5yZXF1ZXN0LnVybDtcblxuICAgICAgICAvLyBOT1RFOiB0aGUgc2VydmljZSAnRXJyb3IgcGFnZScgc2hvdWxkIGJlIHByb3hpZWQuXG4gICAgICAgIGlmICh1cmwgPT09IHNlcnZpY2VSb3V0ZXMuZXJyb3JQYWdlMVxuICAgICAgICAgICAgfHwgdXJsID09PSBzZXJ2aWNlUm91dGVzLmVycm9yUGFnZTIpXG4gICAgICAgICAgICByZXR1cm4gZmFsc2U7XG5cbiAgICAgICAgcmV0dXJuIG9wdGlvbnMuc2VydmljZURvbWFpbnMuc29tZShkb21haW4gPT4gdXJsLnN0YXJ0c1dpdGgoZG9tYWluKSk7XG4gICAgfSxcbiAgICBoYW5kbGVyOiBhc3luYyAoZXZlbnQ6IFJlcXVlc3RQYXVzZWRFdmVudCwgY2xpZW50OiBQcm90b2NvbEFwaSk6IFByb21pc2U8dm9pZD4gPT4ge1xuICAgICAgICByZXF1ZXN0UGlwZWxpbmVTZXJ2aWNlUmVxdWVzdExvZ2dlcignJXInLCBldmVudCk7XG5cbiAgICAgICAgY29uc3QgeyByZXF1ZXN0SWQgfSA9IGV2ZW50O1xuXG4gICAgICAgIGlmIChpc1JlcXVlc3QoZXZlbnQpKVxuICAgICAgICAgICAgYXdhaXQgY2xpZW50LkZldGNoLmNvbnRpbnVlUmVxdWVzdCh7IHJlcXVlc3RJZCB9KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICAvLyBIYWNrOiBDRFAgZG9lc24ndCBhbGxvdyB0byBjb250aW51ZSByZXNwb25zZSBmb3IgcmVxdWVzdHMgc2VudCBmcm9tIHRoZSByZWxvYWRlZCBwYWdlLlxuICAgICAgICAgICAgLy8gU3VjaCBzaXR1YXRpb24gcmFyZWx5IG9jY3VycyBvbiAnaGVhcnRiZWF0JyBvciAnb3Blbi1maWxlLXByb3RvY29sJyByZXF1ZXN0cy5cbiAgICAgICAgICAgIC8vIFdlIGFyZSB1c2luZyB0aGUgc2ltcGxlc3Qgd2F5IHRvIGZpeCBpdCAtIGp1c3Qgb21pdCBzdWNoIGVycm9ycy5cbiAgICAgICAgICAgIHRyeSB7XG4gICAgICAgICAgICAgICAgYXdhaXQgY2xpZW50LkZldGNoLmNvbnRpbnVlUmVzcG9uc2UoeyByZXF1ZXN0SWQgfSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBjYXRjaCAoZXJyOiBhbnkpIHtcbiAgICAgICAgICAgICAgICBpZiAoZXJyLm1lc3NhZ2UgPT09IElOVkFMSURfSU5URVJDRVBURURfUkVTUE9OU0VfRVJST1JfTVNHKVxuICAgICAgICAgICAgICAgICAgICByZXR1cm47XG5cbiAgICAgICAgICAgICAgICB0aHJvdyBlcnI7XG4gICAgICAgICAgICB9XG5cbiAgICAgICAgfVxuICAgIH0sXG59IGFzIFJlcXVlc3RIYW5kbGVyO1xuXG5jb25zdCBkZWZhdWx0RmF2aWNvblJlcXVlc3QgPSB7XG4gICAgY29uZGl0aW9uOiAoZXZlbnQ6IFJlcXVlc3RQYXVzZWRFdmVudCk6IGJvb2xlYW4gPT4ge1xuICAgICAgICBjb25zdCBwYXJzZWRVcmwgPSBuZXcgVVJMKGV2ZW50LnJlcXVlc3QudXJsKTtcblxuICAgICAgICByZXR1cm4gcGFyc2VkVXJsLnBhdGhuYW1lID09PSBERUZBVUxUX0ZBVklDT05fUEFUSDtcbiAgICB9LFxuICAgIGhhbmRsZXI6IGFzeW5jIChldmVudDogUmVxdWVzdFBhdXNlZEV2ZW50LCBjbGllbnQ6IFByb3RvY29sQXBpLCBvcHRpb25zOiBQcm94eWxlc3NTZXR1cE9wdGlvbnMpOiBQcm9taXNlPHZvaWQ+ID0+IHtcbiAgICAgICAgcmVxdWVzdFBpcGVsaW5lTG9nZ2VyKCclcicsIGV2ZW50KTtcblxuICAgICAgICBpZiAoaXNSZXF1ZXN0KGV2ZW50KSlcbiAgICAgICAgICAgIGF3YWl0IGNsaWVudC5GZXRjaC5jb250aW51ZVJlcXVlc3QoeyByZXF1ZXN0SWQ6IGV2ZW50LnJlcXVlc3RJZCB9KTtcbiAgICAgICAgZWxzZSB7XG4gICAgICAgICAgICBpZiAoZXZlbnQucmVzcG9uc2VTdGF0dXNDb2RlID09PSBTdGF0dXNDb2Rlcy5OT1RfRk9VTkQpIHsgLy8gZXNsaW50LWRpc2FibGUtbGluZSBuby1sb25lbHktaWZcbiAgICAgICAgICAgICAgICBjb25zdCB7IGZhdkljb24gfSA9IGxvYWRBc3NldHMob3B0aW9ucy5kZXZlbG9wbWVudE1vZGUpO1xuXG4gICAgICAgICAgICAgICAgYXdhaXQgY2xpZW50LkZldGNoLmZ1bGZpbGxSZXF1ZXN0KHtcbiAgICAgICAgICAgICAgICAgICAgcmVxdWVzdElkOiAgICAgICBldmVudC5yZXF1ZXN0SWQsXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlQ29kZTogICAgU3RhdHVzQ29kZXMuT0ssXG4gICAgICAgICAgICAgICAgICAgIHJlc3BvbnNlSGVhZGVyczogWyBGQVZJQ09OX0NPTlRFTlRfVFlQRV9IRUFERVIgXSxcbiAgICAgICAgICAgICAgICAgICAgYm9keTogICAgICAgICAgICB0b0Jhc2U2NFN0cmluZyhmYXZJY29uKSxcbiAgICAgICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIGVsc2VcbiAgICAgICAgICAgICAgICBhd2FpdCBjbGllbnQuRmV0Y2guY29udGludWVSZXNwb25zZSh7IHJlcXVlc3RJZDogZXZlbnQucmVxdWVzdElkIH0pO1xuICAgICAgICB9XG4gICAgfSxcbn0gYXMgUmVxdWVzdEhhbmRsZXI7XG5cbmNvbnN0IFNQRUNJQUxfUkVRVUVTVF9IQU5ETEVSUyA9IFtcbiAgICBpbnRlcm5hbFJlcXVlc3QsXG4gICAgc2VydmljZVJlcXVlc3QsXG4gICAgZGVmYXVsdEZhdmljb25SZXF1ZXN0LFxuXTtcblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gZ2V0U3BlY2lhbFJlcXVlc3RIYW5kbGVyIChldmVudDogUmVxdWVzdFBhdXNlZEV2ZW50LCBvcHRpb25zPzogUHJveHlsZXNzU2V0dXBPcHRpb25zLCBzZXJ2aWNlUm91dGVzPzogU3BlY2lhbFNlcnZpY2VSb3V0ZXMpOiBhbnkge1xuICAgIGNvbnN0IHNwZWNpYWxSZXF1ZXN0SGFuZGxlciA9IFNQRUNJQUxfUkVRVUVTVF9IQU5ETEVSUy5maW5kKGggPT4gaC5jb25kaXRpb24oZXZlbnQsIG9wdGlvbnMsIHNlcnZpY2VSb3V0ZXMpKTtcblxuICAgIHJldHVybiBzcGVjaWFsUmVxdWVzdEhhbmRsZXIgPyBzcGVjaWFsUmVxdWVzdEhhbmRsZXIuaGFuZGxlciA6IG51bGw7XG59XG5cbiJdfQ==